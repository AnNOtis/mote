10000 Iterations
Rehearsal ---------------------------------------------------
(1) erb           7.370000   0.020000   7.390000 (  7.373433)
(1) erubis        6.690000   0.030000   6.720000 (  6.779903)
(1) fast erubis   6.790000   0.040000   6.830000 (  7.263625)
(1) slim         77.500000   1.540000  79.040000 ( 80.596214)
(1) haml         54.720000   0.270000  54.990000 ( 56.217093)
(1) haml ugly    54.340000   0.340000  54.680000 ( 56.834473)
(1) mote          4.320000   0.020000   4.340000 (  4.405213)
(2) erb           2.590000   0.010000   2.600000 (  2.594679)
(2) erubis        2.120000   0.010000   2.130000 (  2.127887)
(2) fast erubis   1.850000   0.000000   1.850000 (  1.850263)
(2) slim          0.430000   0.010000   0.440000 (  0.430578)
(2) haml          5.600000   0.010000   5.610000 (  5.606656)
(2) haml ugly     4.790000   0.020000   4.810000 (  4.805041)
(3) erb           0.210000   0.000000   0.210000 (  0.239487)
(3) erubis        0.170000   0.000000   0.170000 (  0.172506)
(3) fast erubis   0.200000   0.000000   0.200000 (  0.223222)
(3) slim          0.280000   0.010000   0.290000 (  0.285188)
(3) haml          1.970000   0.000000   1.970000 (  1.990305)
(3) haml ugly     1.740000   0.010000   1.750000 (  1.746921)
(3) mote          0.180000   0.000000   0.180000 (  0.180992)
(4) erb           0.370000   0.000000   0.370000 (  0.372983)
(4) erubis        0.300000   0.000000   0.300000 (  0.305318)
(4) slim          0.450000   0.010000   0.460000 (  0.459540)
(4) haml          2.240000   0.000000   2.240000 (  2.236753)
(4) haml ugly     2.000000   0.010000   2.010000 (  2.005542)
---------------------------------------- total: 241.580000sec

                      user     system      total        real
(1) erb           7.450000   0.030000   7.480000 (  7.460359)
(1) erubis        6.540000   0.020000   6.560000 (  6.547861)
(1) fast erubis   6.570000   0.020000   6.590000 (  6.588940)
(1) slim         76.060000   1.370000  77.430000 ( 77.436093)
(1) haml         54.770000   0.230000  55.000000 ( 55.516789)
(1) haml ugly    52.970000   0.220000  53.190000 ( 54.254841)
(1) mote          4.260000   0.010000   4.270000 (  4.258006)
(2) erb           2.650000   0.000000   2.650000 (  2.658303)
(2) erubis        2.140000   0.000000   2.140000 (  2.138714)
(2) fast erubis   1.870000   0.010000   1.880000 (  1.885161)
(2) slim          0.440000   0.000000   0.440000 (  0.454442)
(2) haml          5.740000   0.030000   5.770000 (  5.795810)
(2) haml ugly     4.820000   0.010000   4.830000 (  4.866266)
(3) erb           0.220000   0.010000   0.230000 (  0.219034)
(3) erubis        0.160000   0.000000   0.160000 (  0.161113)
(3) fast erubis   0.190000   0.000000   0.190000 (  0.191207)
(3) slim          0.280000   0.000000   0.280000 (  0.278010)
(3) haml          1.940000   0.010000   1.950000 (  1.939913)
(3) haml ugly     1.740000   0.000000   1.740000 (  1.736657)
(3) mote          0.180000   0.000000   0.180000 (  0.183879)
(4) erb           0.370000   0.000000   0.370000 (  0.372578)
(4) erubis        0.300000   0.000000   0.300000 (  0.308220)
(4) slim          0.440000   0.010000   0.450000 (  0.449394)
(4) haml          2.250000   0.000000   2.250000 (  2.253916)
(4) haml ugly     2.020000   0.010000   2.030000 (  2.026703)

1. Uncached benchmark. Template is parsed every time.
   Activate this benchmark with slow=1.

2. Cached benchmark. Template is parsed before the benchmark.
   The ruby code generated by the template engine might be evaluated every time.
   This benchmark uses the standard API of the template engine.

3. Compiled benchmark. Template is parsed before the benchmark and
   generated ruby code is compiled into a method.
   This is the fastest evaluation strategy because it benchmarks
   pure execution speed of the generated ruby code.

4. Compiled Tilt benchmark. Template is compiled with Tilt, which gives a more
   accurate result of the performance in production mode in frameworks like
   Sinatra, Ramaze and Camping. (Rails still uses its own template
   compilation.)

